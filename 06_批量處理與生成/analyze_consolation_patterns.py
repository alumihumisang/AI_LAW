#!/usr/bin/env python3
"""
分析各種慰撫金表達方式
"""

def analyze_consolation_patterns():
    print("🎯 慰撫金表達方式全面分析")
    print("=" * 60)
    
    # 收集各種可能的慰撫金表達方式
    consolation_patterns = [
        # 基本表達
        "精神慰撫金500,000元",
        "慰撫金300,000元", 
        "精神賠償200,000元",
        "精神損害賠償100,000元",
        
        # 帶描述的表達
        "請求精神慰撫金500,000元",
        "支出精神慰撫金200,000元",
        "受有精神慰撫金損失300,000元",
        "精神上痛苦請求慰撫金400,000元",
        
        # 複雜表達
        "因本次事故身心遭受痛苦，請求精神慰撫金共計1,000,000元",
        "原告因受有精神上痛苦，請求慰撫金500,000元",
        "因身體健康受損及精神痛苦，請求賠償600,000元",
        "精神上所受痛苦，請求相當之慰撫金800,000元",
        
        # 法律用語表達
        "非財產上之損害賠償500,000元",
        "精神上痛苦之慰撫金400,000元", 
        "身心痛苦之精神賠償300,000元",
        "人格權受侵害之慰撫金200,000元",
        
        # 簡化表達
        "慰撫金：600,000元",
        "精神賠償：400,000元",
        "精神損害：300,000元",
        "身心痛苦賠償200,000元",
        
        # 特殊表達
        "請求精神上慰撫金500,000元整",
        "因精神受創請求慰撫金300,000元",
        "精神慰撫金計400,000元",
        "慰撫金總計500,000元",
        "精神痛苦慰撫金共600,000元"
    ]
    
    print("📋 各種慰撫金表達方式:")
    for i, pattern in enumerate(consolation_patterns, 1):
        print(f"{i:2d}. {pattern}")
    
    print(f"\n總計 {len(consolation_patterns)} 種表達方式")
    
    print("\n🔍 關鍵詞分析:")
    
    # 分析關鍵詞
    primary_keywords = ['慰撫金', '精神慰撫金']
    secondary_keywords = ['精神賠償', '精神損害', '精神痛苦']
    descriptive_keywords = ['身心痛苦', '精神受創', '人格權', '非財產']
    action_keywords = ['請求', '支出', '受有', '賠償', '總計', '共計']
    
    print("🎯 主要關鍵詞:", primary_keywords)
    print("🎯 次要關鍵詞:", secondary_keywords) 
    print("🎯 描述性關鍵詞:", descriptive_keywords)
    print("🎯 動作關鍵詞:", action_keywords)
    
    print("\n💡 建議的優化策略:")
    print("1. 擴大關鍵詞範圍，包含所有可能的表達")
    print("2. 使用更靈活的正則表達式，允許長距離匹配")
    print("3. 增加上下文理解，識別描述性語句")
    print("4. 優先級設計，確保慰撫金不被其他類型誤判")
    print("5. 特殊處理中文數字和完整句子")

if __name__ == "__main__":
    analyze_consolation_patterns()